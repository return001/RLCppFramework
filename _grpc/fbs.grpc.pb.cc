// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fbs.proto

#include "fbs.pb.h"
#include "fbs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fbs {

static const char* BizPipe_method_names[] = {
  "/fbs.BizPipe/onBusiness",
};

std::unique_ptr< BizPipe::Stub> BizPipe::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BizPipe::Stub> stub(new BizPipe::Stub(channel));
  return stub;
}

BizPipe::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_onBusiness_(BizPipe_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::fbs::BizData, ::fbs::BizData>* BizPipe::Stub::onBusinessRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::fbs::BizData, ::fbs::BizData>::Create(channel_.get(), rpcmethod_onBusiness_, context);
}

::grpc::ClientAsyncReaderWriter< ::fbs::BizData, ::fbs::BizData>* BizPipe::Stub::AsynconBusinessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::fbs::BizData, ::fbs::BizData>::Create(channel_.get(), cq, rpcmethod_onBusiness_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::fbs::BizData, ::fbs::BizData>* BizPipe::Stub::PrepareAsynconBusinessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::fbs::BizData, ::fbs::BizData>::Create(channel_.get(), cq, rpcmethod_onBusiness_, context, false, nullptr);
}

BizPipe::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BizPipe_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BizPipe::Service, ::fbs::BizData, ::fbs::BizData>(
          std::mem_fn(&BizPipe::Service::onBusiness), this)));
}

BizPipe::Service::~Service() {
}

::grpc::Status BizPipe::Service::onBusiness(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::fbs::BizData, ::fbs::BizData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fbs

